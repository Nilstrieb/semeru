{"version":3,"sources":["components/Menu.tsx","Task.ts","components/QuickTask.tsx","components/TimerPage.tsx","components/Settings.tsx","components/Stats.tsx","components/SignIn.tsx","components/SignUp.tsx","store/Store.ts","store/LocalStore.ts","store/CloudStore.ts","App.tsx","index.tsx"],"names":["Menu","changeLocale","locale","useContext","LocaleContext","user","UserContext","Navbar","collapseOnSelect","expand","Container","to","className","Toggle","Collapse","id","Nav","root","timerPage","settingsPage","dataPage","Col","Button","variant","onClick","firebase","auth","signOut","then","window","location","reload","catch","err","console","error","signIn","NavDropdown","title","languages","Item","en","de","totalCurrentTaskTime","task","breaks","map","br","end","start","reduce","a","b","currentBreakStart","Date","now","collectionToArray","collection","Object","values","timeForTasksSince","tasks","timeSince","results","Math","max","filter","forEach","name","time","add","totalTaskTime","entries","sort","QuickTask","highlight","handler","Timer","props","style","fontSize","TimerInner","useState","setRefresh","useEffect","i","setInterval","refresh","clearInterval","formatTime","seconds","minutes","hours","floor","toString","padStart","TimerPage","quickTasks","store","StoreContext","ErrorContext","setTask","quickTaskArray","listener","newTask","value","getCurrentTask","errors","removeListener","startHandler","stopHandler","input","prompt","timer","enterLastTaskName","namedTask","stop","addTask","cancelHandler","cancel","anyQuickTaskMatch","find","qt","Row","log","breakEnd","next","updateCurrentTask","breakName","enterBreakName","resume","pause","quickTask","Settings","upload","download","deleteData","newQuickTask","settings","newTaskMessage","addQuickTask","xs","removeQuickTask","removeQuickTaskHandler","new","synchronizeTitle","syncExplain","fromCtoL","fromLtoC","mustBeLoggedIn","dataManagement","delete","times","toTimestamp","date","setHours","getTime","weekDay","getDay","newDate","getDate","setDate","formatTimeText","Stats","groupedBy","setGroupedBy","setTasks","newTasks","getTasks","stats","ListGroup","ListGroupItem","SignIn","setError","history","useHistory","SignInSchema","useMemo","Yup","shape","email","notAnEmail","required","emailReq","password","passwordReq","firebaseErrors","userNotFound","incorrectPassword","formik","useFormik","initialValues","validationSchema","onSubmit","signInWithEmailAndPassword","push","code","validateOnChange","validateOnBlur","Form","e","preventDefault","handleSubmit","fieldName","Group","Label","Control","type","isInvalid","onChange","handleChange","Alert","show","noAccountYet","signUp","SignUp","SignUpSchema","passwordConfirm","min","passwordLength","oneOf","passwordMustMatch","emailAlreadyInUse","weakPassword","createUserWithEmailAndPassword","accountInfo","Store","this","set","Promise","all","get","v","LocalStore","_listeners","defaultValue","item","localStorage","getItem","JSON","parse","newValue","string","stringify","setItem","getOnce","toRemove","newValues","random","CloudStore","_user","_listenerMap","Map","firebaseListener","database","ref","path","off","val","data","on","uid","locales","globalLocalStore","React","createContext","clear","copyData","source","target","pushAll","setLocale","currentTask","App","errorHandler","useCallback","msg","setTimeout","setStore","setQuickTasks","setUser","newLocale","getLocale","getQuickTasks","qTasks","onAuthStateChanged","newUser","lang","Provider","component","apps","length","initializeApp","firebaseConfig","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f817572.chunk.js","sourcesContent":["import React, { useContext } from \"react\";\nimport { LocaleContext, LocaleName, UserContext } from \"../App\";\nimport { NavLink } from \"react-router-dom\";\nimport { Button, Col, Container, Nav, Navbar, NavDropdown } from \"react-bootstrap\";\nimport firebase from \"firebase/compat/app\";\n\ninterface MenuProps {\n    changeLocale: (name: LocaleName) => void;\n}\n\nconst Menu: React.FC<MenuProps> = ({ changeLocale }) => {\n    const locale = useContext(LocaleContext);\n    const user = useContext(UserContext);\n\n    const signOut = () => {\n        firebase\n            .auth()\n            .signOut()\n            .then(() => window.location.reload())\n            .catch((err) => {\n                console.error(\"Could not sign out user\", err);\n            });\n    };\n\n    return (\n        <Navbar collapseOnSelect expand=\"lg\">\n            <Container>\n                <NavLink to=\"/\" className=\"navbar-brand\">\n                    Semeru\n                </NavLink>\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                <Navbar.Collapse id=\"responsive-navbar-nav\">\n                    <Nav className=\"me-auto\">\n                        <NavLink to=\"/\" className=\"nav-link\">\n                            {locale.root.timerPage}\n                        </NavLink>\n                        <NavLink to=\"/settings\" className=\"nav-link\">\n                            {locale.root.settingsPage}\n                        </NavLink>\n                        <NavLink to=\"/stats\" className=\"nav-link\">\n                            {locale.root.dataPage}\n                        </NavLink>\n                        {user ? (\n                            <Col>\n                                <Button variant=\"outline-primary\" onClick={signOut}>\n                                    {locale.auth.signOut}\n                                </Button>\n                            </Col>\n                        ) : (\n                            <NavLink to=\"/sign-in\" className=\"nav-link\">\n                                {locale.auth.signIn}\n                            </NavLink>\n                        )}\n                        <NavDropdown title={locale.root.languages.title} id=\"collasible-nav-dropdown\">\n                            <NavDropdown.Item onClick={() => changeLocale(\"en\")}>\n                                {locale.root.languages.en}\n                            </NavDropdown.Item>\n                            <NavDropdown.Item onClick={() => changeLocale(\"de\")}>\n                                {locale.root.languages.de}\n                            </NavDropdown.Item>\n                        </NavDropdown>\n                    </Nav>\n                </Navbar.Collapse>\n            </Container>\n        </Navbar>\n    );\n};\n\nexport default Menu;\n","export type Collection<T> = {\n    [id: string]: T;\n};\n\nexport interface Task {\n    start: number;\n    name: string;\n    end: number;\n    breaks?: Breaks;\n}\n\nexport interface CurrentTask {\n    start: number;\n    name: string | null;\n    breaks?: Breaks;\n    currentBreakStart?: number;\n}\n\nexport type Breaks = Array<{ start: number; end: number }>;\n\ntype WithBreaks<T> = T & { breaks: Breaks };\n\nexport type CurrentTaskWB = WithBreaks<CurrentTask>;\nexport type TaskWB = WithBreaks<Task>;\n\nexport function withBreaks<T>(value: T): WithBreaks<T> {\n    return {\n        breaks: [],\n        ...value,\n    };\n}\n\nexport function withBreaksArray<T>(array: T[]): Array<WithBreaks<T>> {\n    return array.map((value) => ({\n        breaks: [],\n        ...value,\n    }));\n}\n\nexport function totalCurrentTaskTime(task: CurrentTaskWB): number {\n    const breaks = task.breaks.map((br) => br.end - br.start).reduce((a, b) => a + b, 0);\n    const endTime = task.currentBreakStart || Date.now();\n    return endTime - task.start - breaks;\n}\n\nexport function totalTaskTime(task: TaskWB): number {\n    const breaks = task.breaks.map((br) => br.end - br.start).reduce(add, 0);\n    return task.end - task.start - breaks;\n}\n\nexport interface TaskTime {\n    name: string;\n    time: number;\n}\n\nexport type TaskTimes = TaskTime[];\n\nexport function collectionToArray<T>(collection: Collection<T>): T[] {\n    return Object.values(collection);\n}\n\nexport function timeForTasksSince(tasks: Array<TaskWB>, timeSince: number): TaskTimes {\n    interface TaskTimesObj {\n        [name: string]: TaskTime;\n    }\n\n    const results: TaskTimesObj = {};\n    tasks\n        // only count the time that was actually spent in the requested timeframe\n        .map((task) => ({ ...task, start: Math.max(task.start, timeSince) }))\n        .filter((task) => task.end > timeSince)\n        .forEach((task) => {\n            results[task.name] = results[task.name] ?? {\n                name: task.name,\n                time: 0,\n            };\n            results[task.name].time += totalTaskTime(task);\n        });\n\n    return Object.entries(results)\n        .sort(([, a], [, b]) => b.time - a.time)\n        .map(([name, { time }]) => ({ name, time }));\n}\n\nconst add = (a: number, b: number) => a + b;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\n\nexport type QTask = string;\n\ninterface QuickTaskProps {\n    name: QTask;\n    handler: () => void;\n    highlight?: boolean;\n}\n\nconst QuickTask: React.FC<QuickTaskProps> = ({ highlight, name, handler }) => {\n    return (\n        <Button onClick={handler} variant={highlight ? \"success\" : \"outline-success\"} className=\"m-1\">\n            {name}\n        </Button>\n    );\n};\n\nexport default QuickTask;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ErrorContext, LocaleContext, StoreContext } from \"../App\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nimport { Collection, collectionToArray, CurrentTask, CurrentTaskWB, totalCurrentTaskTime, withBreaks } from \"../Task\";\nimport QuickTask, { QTask } from \"./QuickTask\";\n\ninterface TimerPageProps {\n    quickTasks: Collection<QTask>;\n}\n\nconst TimerPage: React.FC<TimerPageProps> = ({ quickTasks }) => {\n    const locale = useContext(LocaleContext);\n    const store = useContext(StoreContext);\n    const error = useContext(ErrorContext);\n    const [task, setTask] = useState<CurrentTaskWB | null>(null);\n    const quickTaskArray = collectionToArray(quickTasks);\n\n    useEffect(() => {\n        const listener = (newTask: CurrentTask | null) => setTask(newTask ? withBreaks(newTask) : null);\n        store.getCurrentTask(listener).catch(error(locale.errors.getCurrentTask));\n\n        return () => {\n            store.removeListener(listener).catch(error(locale.errors.getCurrentTask));\n        };\n    }, [locale, error, store]);\n\n    const startHandler = async (name?: string) => {\n        if (!(await stopHandler())) {\n            return;\n        }\n        await store.start(name);\n    };\n\n    const pauseHandler = () => {\n        const next = task && {\n            ...task,\n            currentBreakStart: Date.now(),\n        };\n        store.updateCurrentTask(next).catch(error(locale.errors.updateCurrentTask));\n    };\n\n    const resumeHandler = () => {\n        console.log(task);\n        if (!task?.currentBreakStart) {\n            return task;\n        }\n        const breakEnd = Date.now();\n        const next = {\n            start: task.start,\n            name: task.name || null,\n            breaks: [\n                ...task.breaks,\n                {\n                    start: task.currentBreakStart,\n                    end: breakEnd,\n                },\n            ],\n        };\n        store.updateCurrentTask(next).catch(error(locale.errors.updateCurrentTask));\n\n        // if we block on break name for a long time, everything is still accounted for correctly, since all timestamps have been saved\n        const breakName = window.prompt(locale.timer.enterBreakName);\n        if (breakName) {\n            const newTask = {\n                start: task.currentBreakStart,\n                name: breakName,\n                end: breakEnd,\n                breaks: [],\n            };\n            store.addTask(newTask).catch(error(locale.errors.addTask));\n        }\n    };\n\n    // returns true if the stopping succeeds, and false if it failed\n    const stopHandler = async (): Promise<boolean> => {\n        if (!task) {\n            return true;\n        }\n        let name = task.name;\n        if (!name) {\n            const input = window.prompt(locale.timer.enterLastTaskName);\n            if (!input) {\n                return false;\n            }\n            name = input;\n        }\n        const namedTask = { ...task, name };\n        await store.stop(namedTask).catch(error(locale.errors.addTask));\n        return true;\n    };\n\n    const cancelHandler = async () => {\n        await store.cancel();\n    };\n\n    // whether the current task was started from the quick tasks.\n    // note: this does not show whether a name will need to be entered, since the quick task could have been deleted\n    const anyQuickTaskMatch = !!quickTaskArray.find((qt) => qt === task?.name);\n\n    return (\n        <Col className=\"d-grid justify-content-center\">\n            <Row>\n                {/*<Prompt show onInput={() => {}} text={\"test\"} />*/}\n                <Container className=\"d-grid justify-content-center\">\n                    <Timer task={task} />\n                </Container>\n                <Container className=\"d-grid justify-content-center\">\n                    <Col>\n                        <Button\n                            variant={anyQuickTaskMatch || !task ? \"outline-success\" : \"success\"}\n                            onClick={() => startHandler()}\n                        >\n                            {locale.timer.start}\n                        </Button>\n                        {task?.currentBreakStart ? (\n                            <Button variant=\"info\" className=\"m-1\" onClick={resumeHandler}>\n                                {locale.timer.resume}\n                            </Button>\n                        ) : (\n                            <Button variant=\"outline-info\" className=\"m-1\" onClick={pauseHandler}>\n                                {locale.timer.pause}\n                            </Button>\n                        )}\n                        <Button variant=\"outline-danger\" onClick={stopHandler}>\n                            {locale.timer.stop}\n                        </Button>\n                        <Button variant=\"outline-danger\" className=\"m-1\" onClick={cancelHandler}>\n                            {locale.timer.cancel}\n                        </Button>\n                    </Col>\n                </Container>\n            </Row>\n            <div className=\"m-3\" />\n            <Row className=\"d-grid justify-content-center\">\n                {quickTaskArray.map((quickTask) => (\n                    <QuickTask\n                        highlight={quickTask === task?.name}\n                        name={quickTask}\n                        handler={() => startHandler(quickTask)}\n                        key={quickTask}\n                    />\n                ))}\n            </Row>\n        </Col>\n    );\n};\n\ninterface TimerProps {\n    task: CurrentTaskWB | null;\n}\n\nconst Timer: React.FC<TimerProps> = (props) => {\n    return (\n        <h1 style={{ fontSize: 60 }}>\n            <TimerInner {...props} />\n        </h1>\n    );\n};\n\nconst TimerInner: React.FC<TimerProps> = ({ task }) => {\n    const [, setRefresh] = useState(0);\n\n    useEffect(() => {\n        if (task) {\n            const i = setInterval(() => {\n                setRefresh((refresh) => refresh + 1);\n            }, 500);\n            return () => clearInterval(i);\n        }\n    }, [task]);\n\n    return <>{task ? formatTime(totalCurrentTaskTime(task)) : \"00:00:00\"}</>;\n};\n\nfunction formatTime(time: number): string {\n    time = time / 1000;\n    const seconds = time % 60;\n    let minutes = time / 60;\n    let hours = 0;\n    if (minutes > 60) {\n        hours = minutes / 60;\n        minutes = minutes % 60;\n    }\n\n    return (\n        `${Math.floor(Math.max(hours, 0)).toString().padStart(2, \"0\")}:` +\n        `${Math.floor(Math.max(minutes, 0)).toString().padStart(2, \"0\")}:` +\n        `${Math.floor(Math.max(seconds, 0)).toString().padStart(2, \"0\")}`\n    );\n}\n\nexport default TimerPage;\n","import React, { useContext } from \"react\";\nimport QuickTask, { QTask } from \"./QuickTask\";\nimport { Button, Col, Container, Row } from \"react-bootstrap\";\nimport { ErrorContext, LocaleContext, StoreContext, UserContext } from \"../App\";\nimport { Collection } from \"../Task\";\n\ninterface SettingsProps {\n    quickTasks: Collection<QTask>;\n    upload: () => void;\n    download: () => void;\n    deleteData: () => void;\n}\n\nconst Settings: React.FC<SettingsProps> = ({ quickTasks, upload, download, deleteData }) => {\n    const locale = useContext(LocaleContext);\n    const user = useContext(UserContext);\n    const store = useContext(StoreContext);\n    const error = useContext(ErrorContext);\n\n    const newQuickTask = async () => {\n        const task = window.prompt(locale.settings.newTaskMessage);\n        if (!task) {\n            return;\n        }\n        await store.addQuickTask(task).catch(error(locale.errors.addQuickTask));\n    };\n\n    const removeQuickTaskHandler = (id: string) =>\n        store.removeQuickTask(id).catch(error(locale.errors.removeQuickTask));\n\n    return (\n        <Container>\n            <Row>\n                <Row className=\"mb-4\">\n                    <h2>{locale.settings.quickTasks}</h2>\n                    {Object.entries(quickTasks).map(([id, task]) => (\n                        <Row key={id}>\n                            <Col xs={10}>\n                                <QuickTask name={task} handler={() => {}} />\n                                <Button\n                                    className=\"m-1\"\n                                    onClick={() => removeQuickTaskHandler(id)}\n                                    variant=\"outline-danger\"\n                                >\n                                    X\n                                </Button>\n                            </Col>\n                        </Row>\n                    ))}\n                    <Row>\n                        <Col>\n                            <Button variant=\"outline-primary\" className=\"m-1\" onClick={newQuickTask}>\n                                {locale.settings.new}\n                            </Button>\n                        </Col>\n                    </Row>\n                </Row>\n                <Row className=\"mb-4\">\n                    <h2>{locale.settings.synchronizeTitle}</h2>\n                    {user ? (\n                        <Col>\n                            {locale.settings.syncExplain}\n                            <h5>{locale.settings.fromCtoL}</h5>\n                            <Button variant=\"outline-primary\" onClick={upload}>\n                                {locale.settings.upload}\n                            </Button>\n                            <h5 className=\"mt-3\">{locale.settings.fromLtoC}</h5>\n                            <Button variant=\"outline-primary\" onClick={download}>\n                                {locale.settings.download}\n                            </Button>\n                        </Col>\n                    ) : (\n                        <h5>{locale.settings.mustBeLoggedIn}</h5>\n                    )}\n                    <div className=\"mt-5\" />\n                    <h2>{locale.settings.dataManagement}</h2>\n                    <h5>{locale.settings.deleteData}</h5>\n                    <Col>\n                        <Button variant=\"outline-primary\" onClick={deleteData}>\n                            {locale.settings.delete}\n                        </Button>\n                    </Col>\n                </Row>\n            </Row>\n        </Container>\n    );\n};\n\nexport default Settings;\n","import React, { useContext, useEffect, useState } from \"react\";\nimport { ErrorContext, LocaleContext, StoreContext } from \"../App\";\nimport { Button, Col, Container, ListGroup, ListGroupItem, Row } from \"react-bootstrap\";\nimport { Collection, collectionToArray, Task, TaskTimes, timeForTasksSince, withBreaksArray } from \"../Task\";\n\ntype Time = \"day\" | \"week\" | \"month\" | \"all\";\n\nconst times: Time[] = [\"day\", \"week\", \"month\", \"all\"];\n\nconst Stats: React.FC = () => {\n    const locale = useContext(LocaleContext);\n    const store = useContext(StoreContext);\n    const error = useContext(ErrorContext);\n\n    const [groupedBy, setGroupedBy] = useState<Time>(\"day\");\n\n    const [tasks, setTasks] = useState<TaskTimes>([]);\n\n    useEffect(() => {\n        const listener = (newTasks: Collection<Task>) =>\n            setTasks(timeForTasksSince(withBreaksArray(collectionToArray(newTasks)), toTimestamp(groupedBy)));\n        store.getTasks(listener).catch(error(locale.errors.getTasks));\n\n        return () => {\n            store.removeListener(listener).catch(error(locale.errors.getTasks));\n        };\n    }, [locale, error, store, groupedBy]);\n\n    return (\n        <Container>\n            <div className=\"mb-2\">\n                {times.map((name) => (\n                    <span className=\"m-1\" key={name}>\n                        <Button\n                            variant={groupedBy === name ? \"secondary\" : \"outline-secondary\"}\n                            onClick={() => setGroupedBy(name)}\n                        >\n                            {locale.stats[name]}\n                        </Button>\n                    </span>\n                ))}\n            </div>\n            <ListGroup>\n                {tasks.map((task) => (\n                    <ListGroupItem key={task.name}>\n                        <Container>\n                            <Row>\n                                <Col>{task.name}</Col>\n                                <Col>{formatTimeText(task.time)}</Col>\n                            </Row>\n                        </Container>\n                    </ListGroupItem>\n                ))}\n            </ListGroup>\n        </Container>\n    );\n};\n\nconst toTimestamp = (time: Time): number => {\n    switch (time) {\n        case \"all\":\n            return 0;\n        case \"day\": {\n            const date = new Date();\n            date.setHours(0, 0, 0);\n            return date.getTime();\n        }\n        case \"week\": {\n            const date = new Date();\n            const weekDay = (date.getDay() || 7) - 1;\n            const newDate = date.getDate() - weekDay;\n            date.setDate(newDate);\n            date.setHours(0, 0, 0);\n            return date.getTime();\n        }\n        case \"month\":\n            const date = new Date();\n            date.setDate(1);\n            date.setHours(0, 0, 0);\n            return date.getTime();\n    }\n};\n\nfunction formatTimeText(time: number) {\n    time = time / 1000;\n    const seconds = time % 60;\n    let minutes = time / 60;\n    let hours = 0;\n    if (minutes > 60) {\n        hours = minutes / 60;\n        minutes = minutes % 60;\n    }\n\n    return `${Math.floor(hours)}h ${Math.floor(minutes)}min ${Math.floor(seconds)}s`;\n}\n\nexport default Stats;\n","import React, { useContext, useMemo, useState } from \"react\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport { LocaleContext } from \"../App\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport firebase from \"firebase/compat/app\";\nimport { NavLink, useHistory } from \"react-router-dom\";\n\ninterface FormValues {\n    email: string;\n    password: string;\n}\n\nconst SignIn: React.FC = () => {\n    const locale = useContext(LocaleContext);\n    const [error, setError] = useState<string | null>(null);\n    const history = useHistory();\n\n    const SignInSchema = useMemo(\n        () =>\n            Yup.object().shape({\n                email: Yup.string().email(locale.auth.notAnEmail).required(locale.auth.emailReq),\n                password: Yup.string().required(locale.auth.passwordReq),\n            }),\n        [locale]\n    );\n\n    const firebaseErrors: { [string: string]: string } = {\n        \"auth/invalid-email\": locale.auth.notAnEmail,\n        \"auth/user-disabled\": locale.auth.userNotFound,\n        \"auth/user-not-found\": locale.auth.userNotFound,\n        \"auth/wrong-password\": locale.auth.incorrectPassword,\n    };\n\n    const onSubmit = (values: FormValues) => {\n        setError(null);\n        firebase\n            .auth()\n            .signInWithEmailAndPassword(values.email, values.password)\n            .then(() => {\n                setError(null);\n                history.push(\"/\");\n            })\n            .catch((err) => {\n                console.error(err);\n                setError(firebaseErrors[err.code]);\n            });\n    };\n\n    const formik = useFormik({\n        initialValues: { email: \"\", password: \"\" },\n        validationSchema: SignInSchema,\n        onSubmit,\n        validateOnChange: false,\n        validateOnBlur: true,\n    });\n\n    return (\n        <div>\n            <h1>{locale.auth.signIn}</h1>\n            <Form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    formik.handleSubmit(e);\n                }}\n            >\n                {([\"email\", \"password\"] as [\"email\", \"password\"]).map((fieldName) => (\n                    <Form.Group key={fieldName}>\n                        <Form.Label>{locale.auth[fieldName]}</Form.Label>\n                        <Form.Control\n                            type={fieldName}\n                            name={fieldName}\n                            isInvalid={!!formik.errors[fieldName]}\n                            value={formik.values[fieldName]}\n                            onChange={formik.handleChange}\n                        />\n                        <Alert variant=\"danger\" show={!!formik.errors[fieldName]}>\n                            {formik.errors[fieldName]}\n                        </Alert>\n                    </Form.Group>\n                ))}\n                <Button type=\"submit\">{locale.auth.signIn}</Button>\n                <Alert variant=\"danger\" show={!!error}>\n                    {error}\n                </Alert>\n            </Form>\n            <div>\n                <div>{locale.auth.noAccountYet}</div>\n                <NavLink to=\"/sign-up\">{locale.auth.signUp}</NavLink>\n            </div>\n        </div>\n    );\n};\n\nexport default SignIn;\n","import React, { useContext, useMemo, useState } from \"react\";\nimport { Alert, Button, Form } from \"react-bootstrap\";\nimport { LocaleContext } from \"../App\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport firebase from \"firebase/compat/app\";\nimport { useHistory } from \"react-router-dom\";\n\ninterface FormValues {\n    email: string;\n    password: string;\n    passwordConfirm: string;\n}\n\nconst SignUp: React.FC = () => {\n    const locale = useContext(LocaleContext);\n    const [error, setError] = useState<string | null>(null);\n    const history = useHistory();\n\n    const SignUpSchema = useMemo(\n        () =>\n            Yup.object().shape({\n                email: Yup.string().email(locale.auth.notAnEmail).required(locale.auth.emailReq),\n                password: Yup.string().required(locale.auth.passwordReq),\n                passwordConfirm: Yup.string()\n                    .required(locale.auth.passwordReq)\n                    .min(6, locale.auth.passwordLength)\n                    .oneOf([Yup.ref(\"password\")], locale.auth.passwordMustMatch),\n            }),\n        [locale]\n    );\n\n    const firebaseErrors: { [string: string]: string } = {\n        \"auth/invalid-email\": locale.auth.notAnEmail,\n        \"auth/email-already-in-use\": locale.auth.emailAlreadyInUse,\n        \"auth/weak-password\": locale.auth.weakPassword,\n    };\n\n    const onSubmit = (values: FormValues) => {\n        setError(null);\n        firebase\n            .auth()\n            .createUserWithEmailAndPassword(values.email, values.password)\n            .then(() => {\n                setError(null);\n                history.push(\"/\");\n            })\n            .catch((err) => {\n                console.error(err);\n                setError(firebaseErrors[err.code]);\n            });\n    };\n\n    const formik = useFormik({\n        initialValues: { email: \"\", password: \"\", passwordConfirm: \"\" },\n        validationSchema: SignUpSchema,\n        onSubmit,\n        validateOnChange: false,\n        validateOnBlur: true,\n    });\n\n    return (\n        <div>\n            <h1>{locale.auth.signUp}</h1>\n            <p>{locale.auth.accountInfo}</p>\n            <Form\n                onSubmit={(e) => {\n                    e.preventDefault();\n                    formik.handleSubmit(e);\n                }}\n            >\n                <Form.Group>\n                    <Form.Label>{locale.auth.email}</Form.Label>\n                    <Form.Control\n                        type=\"email\"\n                        name=\"email\"\n                        isInvalid={!!formik.errors.email}\n                        value={formik.values.email}\n                        onChange={formik.handleChange}\n                    />\n                    <Alert variant=\"danger\" show={!!formik.errors.email}>\n                        {formik.errors.email}\n                    </Alert>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>{locale.auth.password}</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        name=\"password\"\n                        isInvalid={!!formik.errors.password}\n                        value={formik.values.password}\n                        onChange={formik.handleChange}\n                    />\n                    <Alert variant=\"danger\" show={!!formik.errors.password}>\n                        {formik.errors.password}\n                    </Alert>\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>{locale.auth.passwordConfirm}</Form.Label>\n                    <Form.Control\n                        type=\"password\"\n                        name=\"passwordConfirm\"\n                        isInvalid={!!formik.errors.passwordConfirm}\n                        value={formik.values.passwordConfirm}\n                        onChange={formik.handleChange}\n                    />\n                    <Alert variant=\"danger\" show={!!formik.errors.passwordConfirm}>\n                        {formik.errors.passwordConfirm}\n                    </Alert>\n                </Form.Group>\n                <Button type=\"submit\">{locale.auth.signIn}</Button>\n                <Alert variant=\"danger\" show={!!error}>\n                    {error}\n                </Alert>\n            </Form>\n        </div>\n    );\n};\n\nexport default SignUp;\n","import { Collection, collectionToArray, CurrentTask, Task } from \"../Task\";\nimport { QTask } from \"../components/QuickTask\";\nimport { LocaleName } from \"../App\";\n\nexport type Listener<T> = (values: T) => void;\n\nexport type CurrentTaskWithName = CurrentTask & { name: string };\nexport type PropertyName = \"tasks\" | \"currentTask\" | \"quickTasks\" | \"locale\";\n\nexport default abstract class Store {\n    public async start(name?: string): Promise<void> {\n        const task: CurrentTask = {\n            name: name || null, // firebase does not like undefined\n            start: Date.now(),\n            breaks: [],\n        };\n        await this.set(\"currentTask\", task);\n    }\n\n    public async stop({ start, name, breaks }: CurrentTaskWithName): Promise<void> {\n        const end = Date.now();\n        const newTask: Task = {\n            start,\n            end,\n            breaks,\n            name,\n        };\n\n        await Promise.all([this.addTask(newTask), this.set(\"currentTask\", null)]);\n    }\n\n    public async clear(): Promise<void> {\n        await this.set(\"tasks\", {});\n        await this.set(\"currentTask\", null);\n        await this.set(\"quickTasks\", {});\n        await this.set(\"locale\", \"en\");\n    }\n\n    public async addTask(task: Task): Promise<void> {\n        await this.push(\"tasks\", task);\n    }\n\n    public async cancel() {\n        await this.set(\"currentTask\", null);\n    }\n\n    public async updateCurrentTask(task: CurrentTask | null) {\n        await this.set(\"currentTask\", task);\n    }\n\n    public async setLocale(name: LocaleName) {\n        await this.set(\"locale\", name);\n    }\n\n    public async addQuickTask(task: QTask) {\n        await this.push(\"quickTasks\", task);\n    }\n\n    public getTasks(listener: Listener<Collection<Task>>): Promise<void> {\n        return this.get(\"tasks\", {}, listener);\n    }\n\n    public getQuickTasks(listener: Listener<Collection<QTask>>): Promise<void> {\n        return this.get(\"quickTasks\", {}, listener);\n    }\n\n    public getLocale(listener: Listener<LocaleName>): Promise<void> {\n        return this.get(\"locale\", \"en\", listener);\n    }\n\n    public getCurrentTask(listener: Listener<CurrentTask | null>): Promise<void> {\n        return this.get(\"currentTask\", null, listener);\n    }\n\n    public async pushAll<T>(name: PropertyName, value: Collection<T>): Promise<void> {\n        collectionToArray(value).forEach((v) => this.push(name, v));\n    }\n\n    public abstract removeQuickTask(id: string): Promise<void>;\n\n    public abstract removeListener(listener: Listener<any>): Promise<void>;\n\n    /**\n     * Only use this if realtime-reloading is explicitly *not* wanted\n     */\n    public abstract getOnce<T>(name: PropertyName, defaultValue: T): Promise<T>;\n\n    protected abstract get<T>(name: PropertyName, defaultValue: T, listener: Listener<T>): Promise<void>;\n\n    protected abstract set<T>(name: PropertyName, value: T): Promise<void>;\n\n    protected abstract push<T>(name: PropertyName, value: T): Promise<void>;\n}\n","import { Collection, collectionToArray } from \"../Task\";\nimport Store, { Listener, PropertyName } from \"./Store\";\nimport { QTask } from \"../components/QuickTask\";\n\nexport default class LocalStore extends Store {\n    _listeners: Array<{ value: PropertyName; listener: Listener<any>; defaultValue: any }> = [];\n\n    public async getOnce<T>(name: PropertyName, defaultValue: T): Promise<T> {\n        const item = localStorage.getItem(name);\n        if (!item) {\n            return defaultValue;\n        }\n        return JSON.parse(item);\n    }\n\n    async set<T>(name: PropertyName, newValue: T) {\n        const string = JSON.stringify(newValue);\n        localStorage.setItem(name, string);\n        this._listeners\n            .filter(({ value }) => value === name)\n            .forEach(({ listener, defaultValue }) => listener(newValue || defaultValue));\n    }\n\n    public async removeQuickTask(id: string): Promise<void> {\n        const tasks = await this.getOnce<Collection<QTask>>(\"quickTasks\", {});\n        delete tasks[id];\n        await this.set(\"quickTasks\", tasks);\n    }\n\n    public async removeListener(toRemove: Listener<any>): Promise<void> {\n        this._listeners = this._listeners.filter(({ listener }) => listener !== toRemove);\n    }\n\n    public async pushAll<T>(name: PropertyName, newValues: Collection<T>) {\n        for (const value of collectionToArray(newValues)) {\n            await this.push(name, value);\n        }\n    }\n\n    protected async push<T>(name: PropertyName, value: T): Promise<void> {\n        const id = generateId();\n        const values = await this.getOnce<Collection<T>>(name, {});\n        values[id] = value;\n        await this.set(name, values);\n    }\n\n    protected async get<T>(value: PropertyName, defaultValue: T, listener: Listener<T>): Promise<void> {\n        this._listeners.push({ value, listener, defaultValue });\n        listener(await this.getOnce(value, defaultValue));\n    }\n}\n\nfunction generateId(): string {\n    return `id${Date.now()}_${Math.floor(Math.random() * 1000).toString(16)}`; // very very cool id\n}\n","import Store, { Listener, PropertyName } from \"./Store\";\nimport firebase from \"firebase/compat/app\";\n\ntype FirebaseListener = (a: firebase.database.DataSnapshot, b?: string | null) => any;\n\nexport default class CloudStore extends Store {\n    _user: firebase.User;\n    // we need to map our listeners to firebase listeners, because we cannot use firebase listeners directly,\n    // because LocalStore cannot call firebase listeners.\n    // we need to store the firebase listeners here, because we need to be able to remove them later\n    _listenerMap: Map<Listener<any>, { name: PropertyName; listener: FirebaseListener }>;\n\n    constructor(user: firebase.User) {\n        super();\n        this._user = user;\n        this._listenerMap = new Map();\n    }\n\n    public async removeListener(listener: Listener<any>): Promise<void> {\n        const firebaseListener = this._listenerMap.get(listener);\n        if (!firebaseListener) {\n            return;\n        }\n        firebase.database().ref(this.path(firebaseListener.name)).off(\"value\", firebaseListener.listener);\n    }\n\n    public async removeQuickTask(id: string): Promise<void> {\n        await firebase\n            .database()\n            .ref(`${this.path(\"quickTasks\")}/${id}`)\n            .set(null);\n    }\n\n    public getOnce<T>(name: PropertyName, defaultValue: T): Promise<T> {\n        return firebase\n            .database()\n            .ref(this.path(name))\n            .get()\n            .then((val) => val.val());\n    }\n\n    protected async set<T>(name: PropertyName, value: T): Promise<void> {\n        await firebase.database().ref(this.path(name)).set(value);\n    }\n\n    protected async push<T>(name: PropertyName, value: T): Promise<void> {\n        firebase.database().ref(this.path(name)).push(value);\n    }\n\n    protected async get<T>(name: PropertyName, defaultValue: T, listener: Listener<T>): Promise<void> {\n        const firebaseListener: FirebaseListener = (data) => listener(data.val() || defaultValue);\n        this._listenerMap.set(listener, { name, listener: firebaseListener });\n        firebase.database().ref(this.path(name)).on(\"value\", firebaseListener);\n    }\n\n    private path(name: string): string {\n        return `users/${this._user.uid}/${name}`;\n    }\n}\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport firebase from \"firebase/compat/app\";\nimport { QTask } from \"./components/QuickTask\";\nimport Menu from \"./components/Menu\";\nimport TimerPage from \"./components/TimerPage\";\nimport Settings from \"./components/Settings\";\nimport Stats from \"./components/Stats\";\nimport SignIn from \"./components/SignIn\";\nimport SignUp from \"./components/SignUp\";\nimport Store from \"./store/Store\";\nimport LocalStore from \"./store/LocalStore\";\nimport CloudStore from \"./store/CloudStore\";\nimport { Collection, CurrentTask, Task } from \"./Task\";\nimport de from \"./locale/de.json\";\nimport en from \"./locale/en2.json\";\nimport { Alert } from \"react-bootstrap\";\n\nexport type ErrorHandler = (msg: string) => (err: any) => void;\n\ntype Locale = typeof de;\ntype LocaleName = \"en\" | \"de\";\n\ntype Locales = {\n    [name in LocaleName]: Locale;\n};\n\nconst locales: Locales = {\n    de,\n    en,\n};\n\nconst globalLocalStore = new LocalStore();\n\nconst LocaleContext = React.createContext(en);\nconst UserContext = React.createContext<firebase.User | null>(null);\nconst StoreContext = React.createContext<Store>(globalLocalStore);\nconst ErrorContext = React.createContext<ErrorHandler>(() => () => {});\n\nconst App: React.FC = () => {\n    const errorHandler = useCallback(\n        (msg: string) => (err: any) => {\n            console.error(msg, err);\n            setError(msg);\n            setTimeout(() => setError(null), 3000);\n        },\n        []\n    );\n\n    const [locale, setLocale] = useState<Locale>(en);\n    const [store, setStore] = useState<Store>(globalLocalStore);\n    const [quickTasks, setQuickTasks] = useState<Collection<QTask>>({});\n    const [user, setUser] = useState<firebase.User | null>(null);\n    const [error, setError] = useState<string | null>(null);\n\n    useEffect(() => {\n        const listener = (newLocale: LocaleName) => setLocale(locales[newLocale]);\n        store.getLocale(listener).catch();\n\n        return () => {\n            store.removeListener(listener).catch(errorHandler(locale.errors.getQuickTasks));\n        };\n    }, [locale, errorHandler, store]);\n\n    useEffect(() => {\n        const listener = (qTasks: Collection<QTask>) => setQuickTasks(qTasks);\n        store.getQuickTasks(listener).catch(errorHandler(locale.errors.getQuickTasks));\n\n        return () => {\n            store.removeListener(listener).catch(errorHandler(locale.errors.getQuickTasks));\n        };\n    }, [locale, errorHandler, store]);\n\n    useEffect(() => {\n        firebase.auth().onAuthStateChanged((newUser) => {\n            setUser(newUser);\n            if (!newUser) {\n                setStore(globalLocalStore);\n            } else {\n                setStore(new CloudStore(newUser));\n            }\n        });\n    }, []);\n\n    const changeLocale = (name: LocaleName) => store.setLocale(name).catch(errorHandler(locale.errors.setLocale));\n\n    return (\n        <div lang={locale.name}>\n            <HashRouter>\n                <LocaleContext.Provider value={locale}>\n                    <UserContext.Provider value={user}>\n                        <StoreContext.Provider value={store}>\n                            <ErrorContext.Provider value={errorHandler}>\n                                <Menu changeLocale={changeLocale} />\n                                <Switch>\n                                    <Route path=\"/settings\">\n                                        <Settings\n                                            quickTasks={quickTasks}\n                                            upload={() => copyData(globalLocalStore, store)}\n                                            download={() => copyData(store, globalLocalStore)}\n                                            deleteData={() => deleteData(store)}\n                                        />\n                                    </Route>\n                                    <Route path=\"/stats\">\n                                        <Stats />\n                                    </Route>\n                                    <Route path=\"/sign-in\" component={SignIn} />\n                                    <Route path=\"/sign-up\" component={SignUp} />\n                                    <Route path=\"/\">\n                                        <TimerPage quickTasks={quickTasks} />\n                                    </Route>\n                                </Switch>\n                                <footer>\n                                    <Alert variant=\"danger\" show={!!error}>\n                                        {error}\n                                    </Alert>\n                                </footer>\n                            </ErrorContext.Provider>\n                        </StoreContext.Provider>\n                    </UserContext.Provider>\n                </LocaleContext.Provider>\n            </HashRouter>\n        </div>\n    );\n};\n\nconst deleteData = async (store: Store) => {\n    await store.clear();\n};\n\nconst copyData = async (source: Store, target: Store) => {\n    await target.clear();\n\n    await source.getOnce<Collection<Task>>(\"tasks\", {}).then((tasks) => target.pushAll(\"tasks\", tasks));\n\n    await source.getOnce<LocaleName>(\"locale\", \"en\").then((locale) => target.setLocale(locale));\n\n    await source.getOnce<Collection<QTask>>(\"quickTasks\", {}).then((quickTasks) => {\n        target.pushAll(\"quickTasks\", quickTasks);\n    });\n\n    await source\n        .getOnce<CurrentTask | null>(\"currentTask\", null)\n        .then((currentTask) => target.updateCurrentTask(currentTask));\n};\n\nexport default App;\nexport { LocaleContext, UserContext, StoreContext, ErrorContext };\nexport type { LocaleName };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport firebaseConfig from \"./firebaseConfig.json\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/auth\";\nimport \"firebase/compat/database\";\n\nif (firebase.apps.length === 0) {\n    firebase.initializeApp(firebaseConfig);\n}\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}